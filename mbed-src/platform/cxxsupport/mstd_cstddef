/* mbed Microcontroller Library
 * Copyright (c) 2019 ARM Limited
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef MSTD_CSTDDEF_
#define MSTD_CSTDDEF_

/* <mstd_cstddef>
 *
 * - provides <cstddef>
 * - For ARM C 5, standard C++11/14 features:
 * - - adds macro replacements for alignof and alignas keywords
 * - - adds missing std::nullptr_t
 * - For all toolchains:
 * - - MSTD_CONSTEXPR_XX_14 macros that can be used to mark
 *     things that are valid as constexpr only for C++14 or later,
 *     permitting constexpr use where ARM C 5 would reject it.
  * - - MSTD_CONSTEXPR_XX_11 macros that can be used to permit
  *     constexpr alternatives for C.
 */

#if __cplusplus

#include <cstddef>

/* Macros that can be used to mark functions and objects that are
 * constexpr in C++14 or later, but not in earlier versions.
 */
#if __cplusplus >= 201402
#define MSTD_CONSTEXPR_FN_14 constexpr
#define MSTD_CONSTEXPR_OBJ_14 constexpr
#else
#define MSTD_CONSTEXPR_FN_14 inline
#define MSTD_CONSTEXPR_OBJ_14 const
#endif

#define MSTD_CONSTEXPR_FN_11 constexpr
#define MSTD_CONSTEXPR_OBJ_11 constexpr

#ifdef __CC_ARM

// [expr.alignof]
#define alignof(T) __alignof__(T)

// [dcl.align]
// Types not supported - workaround is to use alignas(alignof(T)), which is legal anyway
#ifndef __alignas_is_defined
#define __alignas_is_defined
#define alignas(N) __attribute__((aligned(N)))
#endif

namespace std {
// [cstddef.syn]
using nullptr_t = decltype(nullptr);

} // namespace std

#endif // __CC_ARM

namespace mstd {
using std::size_t;
using std::ptrdiff_t;
using std::nullptr_t;
using std::max_align_t;

}

#else // __cplusplus

#define MSTD_CONSTEXPR_FN_14 inline
#define MSTD_CONSTEXPR_OBJ_14 const
#define MSTD_CONSTEXPR_FN_11 inline
#define MSTD_CONSTEXPR_OBJ_11 const

#endif // __cplusplus

#endif // MSTD_CSTDDEF_
